package com.dse.thread;

import com.dse.guifx_v3.controllers.TestCasesNavigatorController;
import com.dse.guifx_v3.helps.AutoGeneratedTestCaseExecTask;
import com.dse.guifx_v3.helps.GenerateTestdataTask;
import com.dse.parser.object.AbstractFunctionNode;
import com.dse.parser.object.IFunctionNode;
import com.dse.parser.object.INode;
import com.dse.parser.object.ISourcecodeFileNode;
import com.dse.search.Search;
import com.dse.search.condition.AbstractFunctionNodeCondition;
import com.dse.util.AkaLogger;
import com.dse.util.Utils;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * Manage all threads in aka
 */
public class AkaThreadManager {
    final static AkaLogger logger = AkaLogger.get(AkaThreadManager.class);

    public static List<AkaThread> akaThreadList = new ArrayList<>();

    // MULTIPLE TEST CASE EXECUTION - BEGIN
    public static final int MAX_EXECUTED_TESTCASES = 5;
    public static  ExecutorService executedTestcaseThreadPool = Executors.newFixedThreadPool(MAX_EXECUTED_TESTCASES);
    // MULTIPLE TEST CASE EXECUTION - END

    //---------------------------------
    // AUTOMATED TEST DATA GENERATION - BEGIN
    public static final int MAX_FUNCTIONS = 2;
    public static  ExecutorService autoTestdataGenForSrcFileThreadPool = Executors.newFixedThreadPool(MAX_FUNCTIONS);
    // AUTOMATED TEST DATA GENERATION - END
    //---------------------------------


    //---------------------------------
    // AUTOMATED TEST DATA GENERATION - BEGIN
    public static final int MAX_ITERATIONS= 5;
    public static  ExecutorService autoTestdataGenForFunctionThreadPool = Executors.newFixedThreadPool(MAX_ITERATIONS);
    // AUTOMATED TEST DATA GENERATION - END
    //---------------------------------

    public static List<AkaThread> getTotalRunningThreads() {
        List<AkaThread> threads = new ArrayList<>();
        for (AkaThread thread : akaThreadList) {
            if (thread.getTask().isRunning())
                threads.add(thread);
        }
        return threads;
    }

    public static void stopAutomatedTestdataGenerationForAll(INode root){
        List<INode> functionNodes = Search.searchNodes(root, new AbstractFunctionNodeCondition());
        if (root instanceof IFunctionNode)
            functionNodes.add(root);
        for (INode functionNode: functionNodes)
            if (functionNode instanceof IFunctionNode)
                stopAutomatedTestdataGenerationThreadForAFunction((IFunctionNode) functionNode);
    }

    public static void stopAutomatedTestdataGenerationThreadForAFunction(IFunctionNode functionNode) {
        // stop all threads which used to execute a test case
        for (AkaThread akaThread : akaThreadList) {
            if (akaThread.getTask() instanceof AutoGeneratedTestCaseExecTask) {
                if (((AutoGeneratedTestCaseExecTask) akaThread.getTask()).getFunctionNode().getAbsolutePath().equals(functionNode.getAbsolutePath())) {
                    logger.debug("Interrupt automated test data generation for " + functionNode.getAbsolutePath());
                    akaThread.interrupt();
                }
            } else if (akaThread.getTask() instanceof GenerateTestdataTask) {
                if (((GenerateTestdataTask) akaThread.getTask()).getFunction().getAbsolutePath().equals(functionNode.getAbsolutePath())) {
                    logger.debug("Interrupt automated test data generation for " + functionNode.getAbsolutePath());
                    akaThread.interrupt();
                }
            }
        }
    }

    public static List<AkaThread> getTotalRunningThreads(ISourcecodeFileNode srcNode) {
        List<AkaThread> threads = new ArrayList<>();
        List<INode> functionNodes = Search.searchNodes(srcNode, new AbstractFunctionNodeCondition());

        for (INode functionNode : functionNodes)
            for (AkaThread akaThread : akaThreadList)
                if (akaThread.getTask().isRunning()) {
                    if (akaThread.getTask() instanceof GenerateTestdataTask) {
                        if (((GenerateTestdataTask) akaThread.getTask()).getFunction().getAbsolutePath()
                                .equals(functionNode.getAbsolutePath())) {
                            threads.add(akaThread);
                        }
                    } else if (akaThread.getTask() instanceof AutoGeneratedTestCaseExecTask) {
                        if (((AutoGeneratedTestCaseExecTask) akaThread.getTask()).getFunctionNode().getAbsolutePath()
                                .equals(functionNode.getAbsolutePath()))
                            threads.add(akaThread);
                    }
                }
        return threads;
    }

    public static void stopAutomatedTestdataGenerationThreadForASourcecodeFile(ISourcecodeFileNode srcNode) {
        logger.debug("stopAutomatedTestdataGenerationThreadForASourcecodeFile");
        List<INode> functionNodes = Search.searchNodes(srcNode, new AbstractFunctionNodeCondition());
        logger.debug("The number of threads = " + akaThreadList.size());

        // stop all threads which used to execute a test case
        for (INode function: functionNodes)
            if (function instanceof IFunctionNode)
            stopAutomatedTestdataGenerationThreadForAFunction((IFunctionNode) function);

        // stop all threads which used to generate test data automatically for source code file
        for (INode functionNode : functionNodes)
            for (AkaThread akaThread : akaThreadList) {
                if (akaThread.getTask() instanceof GenerateTestdataTask) {
                    if (((GenerateTestdataTask) akaThread.getTask()).getFunction().getAbsolutePath().equals(functionNode.getAbsolutePath())) {
                        logger.debug("Interrupt automated test data generation for " + functionNode.getAbsolutePath());
                        akaThread.interrupt();
                    }
                }
            }
    }

    public static void removeDoneAutomatedTestdataGenThreads(){
        for (int i = akaThreadList.size() - 1; i >= 0; i--)
            if (akaThreadList.get(i).getTask() instanceof AutoGeneratedTestCaseExecTask
                    || akaThreadList.get(i).getTask() instanceof GenerateTestdataTask)
                if (akaThreadList.get(i).getTask().isDone())
                    akaThreadList.remove(i);
    }

    public static boolean hasAutomatedTestdataGenerationThread(ISourcecodeFileNode functionNode) {
        for (AkaThread akaThread : akaThreadList) {
            if (akaThread.getTask() instanceof AutoGeneratedTestCaseExecTask && akaThread.getTask().isRunning()) {
                ISourcecodeFileNode fileNode = Utils.getSourcecodeFile(((AutoGeneratedTestCaseExecTask) akaThread.getTask()).getFunctionNode());
                if (fileNode.getAbsolutePath().equals(functionNode.getAbsolutePath())) {
                    return true;
                }
            }
        }
        return false;
    }

    public static boolean runningAtLeastOneAutomatedTestdataGenerationThread() {
        for (AkaThread akaThread : akaThreadList) {
            if (akaThread.getTask() instanceof AutoGeneratedTestCaseExecTask && akaThread.getTask().isRunning())
                return true;
            else if (akaThread.getTask() instanceof GenerateTestdataTask && akaThread.getTask().isRunning())
                return true;
        }
        return false;
    }
}
