package com.dse.guifx_v3.helps;

import auto_testcase_generation.testdatagen.DirectedAutomatedTestdataGeneration;
import auto_testcase_generation.testdatagen.RandomAutomatedTestdataGeneration;
import com.dse.config.IFunctionConfig;
import com.dse.guifx_v3.objects.TestCasesTreeItem;
import com.dse.parser.object.ICommonFunctionNode;
import com.dse.parser.object.IFunctionNode;
import com.dse.testcase_manager.TestCase;
import com.dse.testcasescript.object.ITestcaseNode;
import com.dse.thread.AbstractAkaTask;
import com.dse.util.AkaLogger;
import javafx.scene.control.TreeItem;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * This thread takes responsibility for generating test data for a function
 */
public class GenerateTestdataTask extends AbstractAkaTask<List<TestCase>> {

    final static AkaLogger logger = AkaLogger.get(GenerateTestdataTask.class);
    private static Map<IFunctionNode, TreeItem<ITestcaseNode>> map = new HashMap<>();

    private TestCasesTreeItem treeNodeInTestcaseNavigator;
    private ICommonFunctionNode function;

    // a prototype of template function
    private TestCase selectedPrototype;

    private List<AutoGeneratedTestCaseExecTask> testCaseExecTask = new ArrayList<>();

    public GenerateTestdataTask() {
    }

    @Override
    protected List<TestCase> call() {
        switch (function.getFunctionConfig().getTestdataGenStrategy()) {
            case IFunctionConfig.TEST_DATA_GENERATION_STRATEGIES.RANDOM: {
                try {
                    logger.debug("[" + Thread.currentThread().getName() + "] " + "Random test data generation");
                    RandomAutomatedTestdataGeneration gen = new RandomAutomatedTestdataGeneration(function);
                    gen.getAllPrototypes().add(this.selectedPrototype);
                    logger.debug("[" + Thread.currentThread().getName() + "] " + "[" + Thread.currentThread().getName() + "] " + "Generate test data automatically for function " + function.getSimpleName());
                    gen.setFunctionExecThread(this);
                    gen.generateTestdata(function);
                    return gen.getOutputs();
                } catch (Exception e) {
                    e.printStackTrace();
                    break;
                }
            }

            case IFunctionConfig.TEST_DATA_GENERATION_STRATEGIES.DIRECTED_DIJKSTRA: {
                try {
                    logger.debug("[" + Thread.currentThread().getName() + "] " + "Directed test data generation");
                    DirectedAutomatedTestdataGeneration gen = new DirectedAutomatedTestdataGeneration(function, Environment.getInstance().getTypeofCoverage());
                    gen.getAllPrototypes().add(this.selectedPrototype);
                    logger.debug("[" + Thread.currentThread().getName() + "] " + "[" + Thread.currentThread().getName() + "] " + "Generate test data automatically for function " + function.getSimpleName());
                    gen.setFunctionExecThread(this);
                    gen.generateTestdata(function);
                    return gen.getOutputs();

                } catch (Exception e) {
                    e.printStackTrace();
                    break;
                }
            }
        }
        return null;
    }

    public boolean isDoneAll() {
        if (testCaseExecTask.size() >= 1)
            for (AutoGeneratedTestCaseExecTask execTask : testCaseExecTask)
                if (execTask.isRunning())
                    return false;
        return true;
    }

    public String getStatus() {
        int runningCount = 0;
        for (AutoGeneratedTestCaseExecTask execTask : testCaseExecTask)
            if (execTask.isDone())
                runningCount++;
        return runningCount + "/" + testCaseExecTask.size();
    }

    public boolean isStillRunning() {
        if (testCaseExecTask.size() >= 1)
            for (AutoGeneratedTestCaseExecTask execTask : testCaseExecTask)
                if (execTask.isRunning())
                    return true;
        return false;
    }

    public void setTreeNodeInTestcaseNavigator(TestCasesTreeItem treeNodeInTestcaseNavigator) {
        this.treeNodeInTestcaseNavigator = treeNodeInTestcaseNavigator;
    }

    public TestCasesTreeItem getTreeNodeInTestcaseNavigator() {
        return treeNodeInTestcaseNavigator;
    }

    public ICommonFunctionNode getFunction() {
        return function;
    }

    public void setFunction(ICommonFunctionNode function) {
        this.function = function;
    }

    public List<AutoGeneratedTestCaseExecTask> getTestCaseExecTask() {
        return testCaseExecTask;
    }

    public void setTestCaseExecTask(List<AutoGeneratedTestCaseExecTask> testCaseExecTask) {
        this.testCaseExecTask = testCaseExecTask;
    }

    public TestCase getSelectedPrototype() {
        return selectedPrototype;
    }

    public void setSelectedPrototype(TestCase selectedPrototype) {
        this.selectedPrototype = selectedPrototype;
    }
}
